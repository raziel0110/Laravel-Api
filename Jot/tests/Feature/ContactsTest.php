<?php

namespace Tests\Feature;

use App\Contact;
use App\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class ContactsTest extends TestCase
{
    use RefreshDatabase;

    private $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
    }

    /**
     * @test
     */
    public function a_list_of_contacts_can_be_fetched_for_the_authenticated_users()
    {
        $this->withoutExceptionHandling();
        $user        = factory(User::class)->create();
        $anotherUser = factory(User::class)->create();

        $contact  = factory(Contact::class)->create(['user_id' => $user->id]);
        $contact2 = factory(Contact::class)->create(['user_id' => $anotherUser->id]);

        $response = $this->get('/api/contacts?api_token=' . $user->api_token);

        $response->assertJsonCount(1)
            ->assertJson( [
                    'data' => [
                        [
                            'data'  => [
                                'contact_id' => $contact->id,
                            ],
                        ]
                    ]
                ]
            );
    }

    /**
     * @test
     */
    public function an_unauthenticated_user_should_redirected_to_login()
    {
        $response = $this->post('/api/contacts', array_merge($this->data(), ['api_token' => '']));

        $response->assertRedirect('/login');
        $this->assertCount(0, Contact::all());
    }

    /**
     * @test
     */
    public function an_authenticated_user_can_add_a_contact()
    {
        $this->withoutExceptionHandling();

        $response = $this->post('/api/contacts', array_merge($this->data(), ['api_token' => $this->user->api_token]));

        $contact = Contact::first();

        $this->assertEquals('test name', $contact->name);
        $this->assertEquals('test@email.com', $contact->email);
        $this->assertEquals('1985-02-27', $contact->birthday->format('Y-m-d'));
        $this->assertEquals('ABC Company', $contact->company);

        $response->assertStatus(Response::HTTP_CREATED);
        $response->assertJson([
            'data'  => [
                'contact_id' => $contact->id,
            ],
            'links' => [
                'self' => $contact->path(),
            ],
        ]);
    }

    /**
     * @test
     */
    public function email_must_be_a_valid_email()
    {
        $res = $this->post('/api/contacts',
            array_merge($this->data(), ['email' => 'Not an email'])
        );

        $res->assertSessionHasErrors('email');
        $this->assertCount(0, Contact::all());
    }

    /**
     * @test
     */
    public function birthday_are_properly_stored()
    {
        $this->withoutExceptionHandling();
        $res = $this->post('/api/contacts',
            array_merge($this->data()));
        $this->assertCount(1, Contact::all());
        $this->assertInstanceOf(Carbon::class, Contact::first()->birthday);
        $this->assertEquals('1985-02-27', Contact::first()->birthday->format('Y-m-d'));
    }

    /**
     * @test
     */
    public function retrieve_a_single_contact()
    {
        $contact = factory(Contact::class)->create(['user_id' => $this->user->id]);

        $response = $this->get('/api/contacts/' . $contact->id . '?api_token=' . $this->user->api_token);

        $response->assertJson([
            'data' => [
                'contact_id'   => $contact->id,
                'name'         => $contact->name,
                'email'        => $contact->email,
                'birthday'     => $contact->birthday->format('Y-m-d'),
                'company'      => $contact->company,
                'last_updated' => $contact->updated_at->diffForHumans(),
            ],
        ]);
    }

    /**
     * @test
     */
    public function only_the_users_contacts_can_be_retrieved()
    {
        $contact = factory(Contact::class)->create(['user_id' => $this->user->id]);
        $user    = factory(User::class)->create();

        $response = $this->get('/api/contacts/' . $contact->id . '?api_token=' . $user->api_token);

        $response->assertStatus(403);
    }

    /**
     * @test
     */
    public function a_contact_can_be_patched()
    {
        $this->withoutExceptionHandling();
        $contact = factory(Contact::class)->create(['user_id' => $this->user->id]);

        $response = $this->patch('/api/contacts/' . $contact->id, $this->data());

        $contact = $contact->fresh();
        $this->assertEquals('test name', $contact->name);
        $this->assertEquals('test@email.com', $contact->email);
        $this->assertEquals('1985-02-27', $contact->birthday->format('Y-m-d'));
        $this->assertEquals('ABC Company', $contact->company);

        $response->assertStatus(Response::HTTP_OK);
        $response->assertJson([
            'data'  => [
                'contact_id' => $contact->id,
            ],
            'links' => [
                'self' => $contact->path(),
            ],
        ]);
    }

    /**
     * @test
     */
    public function only_the_owner_can_patch_the_contact()
    {
        $contact = factory(Contact::class)->create();

        $anotherUser = factory(User::class)->create();

        $response = $this->patch('/api/contacts/' . $contact->id, array_merge($this->data(), ['api_token' => $anotherUser->api_token]));

        $response->assertStatus(403);
    }


    /**
     * @test
     */
    public function fiels_are_required()
    {
        collect(['name', 'email', 'birthday', 'company'])
            ->each(function ($field) {
                $res = $this->post('/api/contacts',
                    array_merge($this->data(), [$field => ''])
                );

                $res->assertSessionHasErrors($field);
                $this->assertCount(0, Contact::all());
            });
    }

    /**
     * @test
     */
    public function a_contact_can_be_deleted()
    {
        $contact = factory(Contact::class)->create(['user_id' => $this->user->id]);

        $response = $this->delete('/api/contacts/' . $contact->id, [
            'api_token' => $this->user->api_token,
        ]);

        $this->assertCount(0, Contact::all());

        $response->assertStatus(Response::HTTP_NO_CONTENT);
    }

    /**
     * @test
     */
    public function only_the_owner_can_delete_the_contact()
    {
        $contact = factory(Contact::class)->create();

        $anotherUser = factory(User::class)->create();
        $response    = $this->delete('/api/contacts/' . $contact->id, ['api_token' => $this->user->api_token]);

        $response->assertStatus(403);
    }


    private function data()
    {
        return [
            'name'      => 'test name',
            'email'     => 'test@email.com',
            'birthday'  => '02/27/1985',
            'company'   => 'ABC Company',
            'api_token' => $this->user->api_token,
        ];
    }
}
